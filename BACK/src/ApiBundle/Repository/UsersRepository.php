<?php

namespace ApiBundle\Repository;
use Doctrine\Common\Collections\Criteria;

/**
 * UsersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsersRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $email
     * @return array
     */
    public function getUserByEmail($email) {
        $user = $this->createQueryBuilder('u')
            ->where('u.active = :active AND u.email = :email')
            ->setParameter('active', 1)
            ->setParameter('email', $email)
            ->getQuery()
            ->getArrayResult();

        return $user;
    }

    /**
     * @param $user_id
     * @return array
     */
    public function getUserById($user_id) {
        $user = $this->createQueryBuilder('u')
            ->where('u.active = :active AND u.id = :id')
            ->setParameter('active', 1)
            ->setParameter('id', $user_id)
            ->getQuery()
            ->getArrayResult();

        return $user;
    }

    /**
     * @param $user_id
     * @return array
     */
    public function getUsersByTeam($team_id)
    {
        $users = $this->createQueryBuilder('u')
            ->join('u.UsersTeam', 't', 'WITH', 't.active = :active')
            ->where('u.active = :active AND t.TeamsDetails = :id')
            ->setParameter('id', $team_id)
            ->setParameter('active', 1)
            ->getQuery()
            ->getArrayResult();

        return $users;
    }

    /**
     * @param $subject_id
     * @return array
     */
    public function  getCoatchBySubjectId($subject_id)
    {
        $users = $this->createQueryBuilder('u')
            ->join('u.UsersCoatch', 't', 'WITH', 't.active = :active')
            ->where('u.active = :active AND t.CoatchSubjects = :id')
            ->setParameter('id', $subject_id)
            ->setParameter('active', 1)
            ->getQuery()
            ->getArrayResult();

        return $users;
    }

    /**
     * @param $user_id
     * @return array
     */
    public function getUsersNotInTeam($team_id)
    {
        $users = $this->getUsersByTeam($team_id);

        $not = [];
        foreach($users as $value) {
            $not[] = $value['id'];
        }

        $users = $this->createQueryBuilder('u')
            ->where('u.active = :active AND u.role = :role AND u.id NOT IN ('.implode(',', $not).')')
            ->setParameter('active', 1)
            ->setParameter('role', 0)
            ->getQuery()
            ->getArrayResult();

        return $users;
    }
}
